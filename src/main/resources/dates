/*
 * Copyright (c) 2018-2019 RBC Capital Markets, LLC
 * All rights reserved.
 *
 * This software and its accompanying documentation are the confidential and
 * proprietary information of RBC Capital Markets, LLC. Use, disclosure,
 * transmission or redistribution of the software or documentation, or of any
 * part, in any form, by any means, is strictly prohibited unless specific,
 * written permission is granted by RBC Capital Markets, LLC.
 */
package com.judell.lab.Date;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.TimeZone;


/**
 * A handful of convenience functions for working with the perpetually obtuse
 * and brain-damaged Java time library. We are now on our third generation of
 * time classes in Java, and they are still epically useless in the real world.
 * Even with the latest date and time mechanisms in Java 11, you still cannot
 * easily and reliably determine if a date is valid -- so here you go.
 */
public final class Dates
{
    private Dates() {}

    public static final TimeZone TZ = TimeZone.getTimeZone("America/Chicago");
    private static final int
            YEAR_MIN = 1800,
            YEAR_MAX = 3000;
    private static final int[] MONTHS = {0,
            31, 29, 31, 30,
            31, 30, 31, 31,
            30, 31, 30, 31};


    public static Calendar cal()
    {
        return Calendar.getInstance(TZ);
    }


    /**
     * Tell if the given year is a leap year. This works for any reasonable
     * business date.
     */
    public static boolean leap(int year)
    {
        if(year % 4 == 0)
        {
            if(year % 100 == 0)
            {
                return year % 400 == 0;
            }
            return true;
        }
        return false;
    }


    /**
     * Tell if the given date is a valid US date, returning the equivalent
     * SQL date. If the date is not valid, then null is returned. The month is
     * in the sensible 1-12 range, not the brain-damaged zero-relative month
     * of Java Calendar.
     */
    public static Date date(int year, int month, int day)
    {
        if ((year >= YEAR_MIN && year <= YEAR_MAX) &&
                between(month, 1, 12) &&
                between(day, 1, 31))
        {
            var days = MONTHS[month];
            if (month == 2)
            {
                days = leap(year) ? 29 : 28;
            }
            if (day <= days)
            {
                var cal = cal();
                cal.set(year, month - 1, day);
                return new Date(cal.getTime().getTime());
            }
        }
        return null;
    }


    public static Time clock()
    {
        return new Time(System.currentTimeMillis());
    }


    public static Date today()
    {
        return new Date(System.currentTimeMillis());
    }


    public static Timestamp now()
    {
        return new Timestamp(System.currentTimeMillis());
    }


    public static Timestamp ts(Date date, Time time)
    {
        var c = cal();
        var ld = date.toLocalDate();
        var lt = time.toLocalTime();
        c.set(ld.getYear(), ld.getMonthValue(), ld.getDayOfMonth(),
                lt.getHour(), lt.getMinute(), lt.getSecond());
        return new Timestamp(c.getTimeInMillis());
    }

    public static boolean between(int value, int min, int max)
    {
        return (value >= min) && (value <= max);
    }
}
